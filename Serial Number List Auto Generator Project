
# -*- coding: utf-8 -*-
"""
Created on Sun Apr 11 01:57:16 2021
Find the directory Names
After getting a list of subdirectories,  '.idea' becomes the first index of the list
removed '.idea' by using for loop

@author: Minjune Jee


"""

import os
from typing import Dict, List, Union, Any

import cv2
import pytesseract
import xlsxwriter
import math
import datetime

from xlsxwriter.worksheet import Worksheet

date_today = datetime.datetime.now()
date_today = str(date_today)[:10]

pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files (x86)\\Tesseract-OCR\\tesseract.exe'


class Dir_file_name:
    directory_file_name: Any

    def __init__(self) -> None:
        self.directory_file_name = {}
        self.serial_number_list = []

    def find_directory_names(self) -> Dict:
        folder = '.'
        sub_directory = [name for name in os.listdir(folder) if os.path.isdir(os.path.join(folder, name))]

        len_dir = len(sub_directory)
        directory_list = []

        for d in range(1, len_dir):
            directory_list.append(d)

        for dl in directory_list:
            path = "./" + str(dl)
            files = os.listdir(path)
            self.directory_file_name.update({dl: files})


        return self.directory_file_name


class Create_Template(Dir_file_name):

    def header(self):
        print("header", self.directory_file_name)
        self.find_directory_names()
        self.outWorkbook = xlsxwriter.Workbook(date_today + ".xlsx")

        title_merget_format = self.outWorkbook.add_format({
            'bold': 1,
            'bottom': 6,
        })

        date_merget_format = self.outWorkbook.add_format({
            'bottom': 6,
        })

        self.outSheet = self.outWorkbook.add_worksheet()

        self.outSheet.set_column(
            'B:E',
            24,
        )

        self.outSheet.merge_range(
            'A1:E1',
            "",
            title_merget_format,
        )

        self.outSheet.write_rich_string(
            'A1',
            "IBM - TD - Workstation Project - Privacy Scrfeen Install Project                ",
            date_merget_format,
            "Date(yyyy-mm-dd): " + date_today,
            title_merget_format,
        )

    def count_dir_file(self) -> List:
        num_dirs_files = []

        i = 1
        while i <= len(self.directory_file_name):
            file_num = len(self.directory_file_name[i])
            df_tuple = (i, file_num)
            num_dirs_files.append(df_tuple)
            i += 1

        return num_dirs_files

    def layout(self):

        self.header()

        before_vertical_time = 1
        time_slot = ''

        dir_file = self.count_dir_file()

        for i in dir_file:
            print(i)
            after_vertical_time = before_vertical_time + i[1] / 4

            if i[1] % 4 == 0:
                after_vertical_time = math.floor(after_vertical_time)
            else:
                after_vertical_time = math.floor(after_vertical_time) + 1

            if i[0] == 1:
                time_slot = "8:00 AM \n to \n 9:00 AM"
            elif i[0] == 2:
                time_slot = "9:00 AM \n to \n 10:00 AM"
            elif i[0] == 3:
                time_slot = "10:00 AM \n to \n 11:00 AM"
            elif i[0] == 4:
                time_slot = "11:00 AM \n to \n 12:00 PM"
            elif i[0] == 5:
                time_slot = "1:00 PM \n to \n 2:00 PM"
            elif i[0] == 6:
                time_slot = "2:00 PM \n to \n 3:00 PM"
            elif i[0] == 7:
                time_slot = "3:00 PM \n to \n 4:00 PM"

            merge_format = self.outWorkbook.add_format({
                'align': 'center',
                'valign': 'vcenter',
                'bottom': 6,
                'left': 6,
            })

            self.outSheet.merge_range(before_vertical_time, 0, after_vertical_time, 0, time_slot, merge_format)

            double_border_bottom = self.outWorkbook.add_format()
            double_border_bottom.set_bottom(6)

            double_border_right = self.outWorkbook.add_format()
            double_border_right.set_right(6)

            double_border_bottom_right = self.outWorkbook.add_format()
            double_border_bottom_right.set_right(6)
            double_border_bottom_right.set_bottom(6)

            for z in range(4):
                self.outSheet.write(after_vertical_time, z, None, double_border_bottom)
            self.outSheet.write(after_vertical_time, 4, None, double_border_bottom_right)
            before_vertical_time = after_vertical_time + 1


"""Extract the Serial Numbers"""


class Extract(Create_Template):
    length: str
    common: str

    def __init__(self) -> None:
        super().__init__()
        self.serial_number_dict = {}
        self.length = input("Enter ther the length of the serial number")
        self.common = input("Enter the common part")

    def extract_serial_number(self) -> Dict:
        self.find_directory_names()
        self.header()
        self.layout()

        l_except_common = int(self.length) - len(self.common)
        i = 1
        d_f = self.directory_file_name

        while i <= len(d_f):
            serial_number_list = []

            for j in d_f[i]:
                serial_number: str = ''
                file = j
                file_address = "./" + str(i) + "/" + str(file)
                img = cv2.imread(file_address)
                text = pytesseract.image_to_string(img)

                count_num_or_char: int = 0
                for z in range(0, len(text)):
                    serial_number += text[z]
                    if self.common in serial_number and text[z] == '\n':
                        serial_number = serial_number.split(self.common)[1]
                        f = 0
                        while f <= 3:
                            x = serial_number[f]
                            if 65 <= ord(x) <= 90:
                                count_num_or_char += 1
                            elif 48 <= ord(x) <= 57:
                                count_num_or_char += 1
                            f += 1
                        serial_number = self.common + serial_number
                        break

                if count_num_or_char != l_except_common or self.common not in serial_number:
                    serial_number_list.append('Error' + file_address)
                else:
                    serial_number.replace('O', '0')
                    serial_number_modified = serial_number[:int(self.length)]
                    serial_number_list.append(serial_number_modified)

            print(serial_number_list)
            print(type(serial_number_list))

            self.serial_number_dict.update({i: serial_number_list})
            i += 1
        return self.serial_number_dict


class Display_serial_number(Extract):

    def display(self) -> object:
        self.extract_serial_number()
        count_y = 1
        check_4th = False
        print("display")
        print(self.serial_number_dict)
        for i in self.serial_number_dict:
            count_x: int = 1
            for j in self.serial_number_dict[i]:
                check_4th = False
                self.outSheet.write(
                    count_x,
                    count_y,
                    j,
                )
                count_x += + 1
                if count_x == 5:
                    count_y = count_y + 1
                    check_4th = True
                    count_x = 1

            if check_4th:
                count_y += 1
            else:
                count_y += 2
        self.outWorkbook.close()

y = Display_serial_number()
print("__dict__", y.__dict__)
print(y.display())
